#!/usr/bin/env -S nvim --headless -l

-- Simulate complete user experience for log view functionality
vim.cmd("set rtp+=.")
vim.cmd("runtime plugin/jj-fugitive.lua")

print("üéØ === User Experience Simulation: Log View + Enter ===")
print("This test simulates the exact workflow a user would follow")

-- Step 1: User runs :J log
print("\nüìù Step 1: User runs ':J log'")
local log_module = require("jj-fugitive.log")
log_module.show_log({ limit = 5 })
print("‚úÖ Log view created")

-- Step 2: Find and enter the log buffer
print("\nüìù Step 2: Neovim opens log buffer")
local log_buffer = nil
for _, bufnr in ipairs(vim.api.nvim_list_bufs()) do
  if vim.api.nvim_buf_is_valid(bufnr) then
    local name = vim.api.nvim_buf_get_name(bufnr)
    if name:match("jj%-log") then
      log_buffer = bufnr
      break
    end
  end
end

if not log_buffer then
  print("‚ùå CRITICAL FAILURE: Could not find log buffer")
  os.exit(1)
end

vim.api.nvim_set_current_buf(log_buffer)
print("‚úÖ User is now in log buffer")

-- Step 3: Check what user sees
print("\nüìù Step 3: User sees log content")
local lines = vim.api.nvim_buf_get_lines(log_buffer, 0, -1, false)
print("Buffer contains", #lines, "lines")
print("Sample content (first 10 lines):")
for i = 1, math.min(10, #lines) do
  print(string.format("  %2d: %s", i, lines[i]))
end

-- Step 4: Check cursor position
print("\nüìù Step 4: Cursor is positioned automatically")
local cursor_pos = vim.api.nvim_win_get_cursor(0)
local current_line = vim.api.nvim_get_current_line()
print("Cursor position:", cursor_pos[1])
print("Current line:", current_line)

-- Step 5: User presses Enter
print("\nüìù Step 5: User presses Enter on current line")

-- Extract commit ID using the same logic as the actual plugin
local function get_commit_from_line(line)
  local first_part = line:match("^([^|]+)")
  if first_part then
    first_part = vim.trim(first_part)
    if not (first_part:match("Commit ID") or first_part:match("Description")) then
      local tokens = {}
      for token in first_part:gmatch("%S+") do
        table.insert(tokens, token)
      end
      if #tokens >= 3 then
        return tokens[#tokens]
      end
    end
  end
  return nil
end

local commit_id = get_commit_from_line(current_line)
print("Commit ID extracted:", commit_id or "NONE")

if not commit_id then
  print("‚ùå CRITICAL FAILURE: Could not extract commit ID")
  print("This means pressing Enter would fail")
  os.exit(1)
end

-- Step 6: Execute the action that Enter would trigger
print("\nüìù Step 6: Execute 'jj show' command (what Enter does)")
local main_module = require("jj-fugitive.init")
local show_result = main_module.run_jj_command_from_module({ "show", commit_id })

if not show_result then
  print("‚ùå CRITICAL FAILURE: jj show command failed")
  print("This means pressing Enter would show an error")
  os.exit(1)
end

print("‚úÖ jj show command succeeded")
print("First 300 characters of commit details:")
print(string.rep("-", 60))
print(string.sub(show_result, 1, 300))
if #show_result > 300 then
  print("... (truncated)")
end
print(string.rep("-", 60))

-- Step 7: Test the original reported issue scenario
print("\nüìù Step 7: Test original issue (commands from subdirectory)")
print(
  "Original issue: 'when i runn \"J log\" with an open buffer in a jj repo i get Failed to get log'"
)

-- Simulate user having a file open in a subdirectory
local original_cwd = vim.fn.getcwd()
vim.cmd("cd lua")
print("Changed to subdirectory:", vim.fn.getcwd())

-- Test that repository detection still works
local repo_root_from_subdir = main_module.get_repo_root()
print("Repository root detected from subdirectory:", repo_root_from_subdir or "NONE")

if not repo_root_from_subdir then
  print("‚ùå CRITICAL FAILURE: Repository detection failed from subdirectory")
  os.exit(1)
end

-- Test that the same commit ID still works from subdirectory
local subdir_show_result = main_module.run_jj_command_from_module({ "show", commit_id })
if not subdir_show_result then
  print("‚ùå CRITICAL FAILURE: jj show failed from subdirectory")
  print("The original issue is NOT fixed")
  os.exit(1)
end

print("‚úÖ jj show works from subdirectory - original issue is FIXED")

-- Restore directory
vim.cmd("cd " .. vim.fn.fnameescape(original_cwd))

-- Step 8: Test other log view operations
print("\nüìù Step 8: Test other log operations (e, n, r, d)")

-- Test edit command
local edit_result = main_module.run_jj_command_from_module({ "edit", commit_id })
if edit_result then
  print("‚úÖ 'e' (edit) operation would work")
else
  print("‚ö†Ô∏è  'e' (edit) operation might have issues")
end

-- Test diff command
local diff_result = main_module.run_jj_command_from_module({ "diff", "-r", commit_id })
if diff_result then
  print("‚úÖ 'd' (diff) operation would work")
else
  print("‚ö†Ô∏è  'd' (diff) operation might have issues")
end

print("\nüéâ === USER EXPERIENCE SIMULATION COMPLETE ===")
print("‚úÖ ALL CRITICAL FUNCTIONALITY WORKING")
print("")
print("Summary of what works:")
print("  ‚úÖ User can run ':J log' to open log view")
print("  ‚úÖ Cursor is positioned on first commit automatically")
print("  ‚úÖ Pressing Enter extracts correct commit ID")
print("  ‚úÖ jj show command executes successfully")
print("  ‚úÖ Everything works from subdirectories (ORIGINAL ISSUE FIXED)")
print("  ‚úÖ Log view operations (edit, diff) are functional")
print("")
print("üéØ The reported issue should now be resolved!")
